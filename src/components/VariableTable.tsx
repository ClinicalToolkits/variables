import React, { useEffect, useState } from "react";
import { GenericTable, GenericTableProps } from "@clinicaltoolkits/universal-react-components";
import { Button, Container, useMantineTheme } from "@mantine/core";
import { VariableModal } from "./VariableEditor";
import { convertObjectArrayToComboboxDataArray, tags, ObjectInfoConfig, ComboboxData, entityRecords } from "@clinicaltoolkits/type-definitions";
import { fetchVariables } from "../api";
import { Variable, getVariableObjectConfig, convertVariablesToComboboxData } from "../types";
import { fetchDescriptiveRatingSets } from "../descriptive-ratings/api";

const tagsComboboxData: ComboboxData[] = convertObjectArrayToComboboxDataArray({ array: Object.values(tags), idPath: 'id', labelPath: 'name' });
const entitiesComboboxData: ComboboxData[] = convertObjectArrayToComboboxDataArray({array: Object.values(entityRecords), idPath: 'abbreviatedName', labelPath: 'abbreviatedName', searchTermsPath: 'name'});

export const VariableTable = () => {
  const [variables, setVariables] = useState<Variable[]>([]);
  const [selectedVariable, setSelectedVariable] = useState<Variable | null>(null);
  const [bOpenedVariableModal, setOpenedVariableModal] = React.useState(false);
  const [descriptiveRatingSetComboxData, setDescriptiveRatingSetComboxData] = useState<ComboboxData[]>([]);
  const [variablesComboboxData, setVariablesComboboxData] = useState<ComboboxData[]>([]);
  const [variableObjectConfig, setVariableObjectConfig] = useState<ObjectInfoConfig<Variable>>(getVariableObjectConfig(tagsComboboxData, entitiesComboboxData, descriptiveRatingSetComboxData, variablesComboboxData));
  const theme = useMantineTheme();

  const prepData = async () => {
    const variables = await fetchVariables({ bIncludeAutoGeneratedVariables: false });
    if (!variables) return;
    setVariables(variables);

    const descriptiveRatingSets = await fetchDescriptiveRatingSets();
    let localDescriptiveRatingComboxData = convertObjectArrayToComboboxDataArray({ array: descriptiveRatingSets, idPath: 'id', labelPath: 'fullName' });
    setDescriptiveRatingSetComboxData(localDescriptiveRatingComboxData);

    const localVariablesComboxData = convertVariablesToComboboxData(variables);
    setVariablesComboboxData(localVariablesComboxData);

    setVariableObjectConfig(getVariableObjectConfig(tagsComboboxData, entitiesComboboxData, localDescriptiveRatingComboxData, localVariablesComboxData));
  };

  useEffect(() => {
    prepData();
  }, []);

  useEffect(() => {
    if (selectedVariable) {
      setOpenedVariableModal(true);
    } else {
      setOpenedVariableModal(false);
    }
  }, [selectedVariable]);

  const handleSelectedVariableUpdate = (updatedVariable: Variable) => {
    let bFoundVariable = false;
    const updatedVariables = variables.map(variable => {
      if (variable.idToken.id === updatedVariable.idToken.id) {
        bFoundVariable = true;
        return { ...variable, ...updatedVariable };
      }
      return variable;
    });
    setVariables(bFoundVariable ? updatedVariables : [...variables, updatedVariable]);
  };

  const handleVariableModalClose = () => {
    setOpenedVariableModal(false);
    setSelectedVariable(null);
  };

  const variableTableProps: GenericTableProps<Variable> = {
    data: variables,
    columns: [
      { path: "associatedEntityAbbreviatedName" },
      { path: "fullName" }, 
      { path: "abbreviatedName" },
      { path: "subgroupTag.displayName" },
      { path: "orderWithinSet" },
      { path: "dataType" },
      { path: "metadata.bNormallyDistributed", label: "Normally Distributed" },
    ],
    headingText: "Variables",
    onRowClick: (variable) => setSelectedVariable(variable),
  };

  return (
    <Container fluid w={"100vw"} p={"xs"} bg={theme.colors.dark[7]}>
      <GenericTable {...variableTableProps} />
      <Button onClick={() => setOpenedVariableModal(true)}>Create Variable</Button>
      <VariableModal variableObjectConfig={variableObjectConfig} variable={selectedVariable} bOpened={bOpenedVariableModal} onClose={handleVariableModalClose} mode={selectedVariable ? 'update' : 'create'} onVariableUpdated={(updatedVariable) => { handleSelectedVariableUpdate(updatedVariable) }} />
    </Container>
  );
};