
import { DataType } from "@clinicaltoolkits/type-definitions";
import { Variable } from "../../types";
import { getUniversalDescriptiveRatings } from "../../descriptive-ratings/utility/getUniversalRatings";
import { createDescriptorVariable, createPercentileRangeVariable, createPercentileRankVariable, createPreviousScoreVariable } from "./ChildVariables";
import { fetchDescriptiveRatingsArray, DescriptiveRating, getOptionsFromDescriptiveRatings } from "../../descriptive-ratings";

export const createAutoGeneratedVariables = (variable: Variable, accumulator?: Variable[], accumulatorPromises?: Promise<void>[], globallyAppliedDescriptiveRatings?: DescriptiveRating[]): void => {
  if (variable.metadata?.bCreatePercentileRank) {
    const percentileRankVariable = createPercentileRankVariable(variable, true);
    accumulator?.push(percentileRankVariable);
  }

  if (variable.metadata?.bCreateDescriptiveRating) {
    const descriptorVariable = createDescriptorVariable(variable, true);
    applyDescriptiveRatings(descriptorVariable, variable.dataType, variable?.metadata?.descriptiveRatingId, globallyAppliedDescriptiveRatings, accumulatorPromises);
    accumulator?.push(descriptorVariable);
  }

  if (variable.metadata?.bCreatePreviousScore) {
    const previousScoreVariable = createPreviousScoreVariable(variable, true);
    accumulator?.push(previousScoreVariable);
  }

  if (variable.metadata?.bCreatePercentileRange) {
    const percentileRangeVariable = createPercentileRangeVariable(variable, true);
    accumulator?.push(percentileRangeVariable);
  }
};

export async function applyDescriptiveRatings(variable: Variable, dataType: DataType, descriptiveRatingId?: string, globallyAppliedDescriptiveRatings?: DescriptiveRating[], additionalAccPromises?: Promise<void>[]): Promise<void> {
  if (!variable.metadata) {
    variable.metadata = {
      descriptiveRatings: [],
    };
  }
  if (descriptiveRatingId) {
    const fetchPromise = fetchDescriptiveRatingsArray(descriptiveRatingId).then((ratings) => {
      variable.metadata!.descriptiveRatings = ratings;
      variable.metadata!.dropdownOptions = getOptionsFromDescriptiveRatings(ratings, dataType);
    });
    if (additionalAccPromises) {
      additionalAccPromises?.push(fetchPromise);
    } else {
      await fetchPromise;
    }
  } else if (globallyAppliedDescriptiveRatings) {
    variable.metadata!.descriptiveRatings = globallyAppliedDescriptiveRatings;
    variable.metadata!.dropdownOptions = getOptionsFromDescriptiveRatings(globallyAppliedDescriptiveRatings, dataType);
  } else {
    const universalDescriptiveRatings = getUniversalDescriptiveRatings();
    variable.metadata!.descriptiveRatings = universalDescriptiveRatings;
    variable.metadata!.dropdownOptions = getOptionsFromDescriptiveRatings(universalDescriptiveRatings, dataType);
  }
}